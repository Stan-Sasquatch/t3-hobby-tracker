// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model BookRating {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  rating    Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([bookId, userId])
}

model Book {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  title       String       @db.VarChar(255)
  bookRatings BookRating[]
  author      String

  @@unique([title, author])
}

enum Role {
  USER
  ADMIN
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(USER)
  accounts      Account[]
  sessions      Session[]
  ratings       BookRating[]
  userFriends        Friend[] @relation("users")
  friendUserFriends  Friend[] @relation("friend_users")
  userFriendRequests        FriendRequest[] @relation("user_requests")
  friendUserFriendRequests  FriendRequest[] @relation("friend_user_requests")
  lastLoginDate DateTime?
}

model Friend {
  id        String      @id @default(cuid())
  user_id   String
  friend_id String
  user      User    @relation(name: "users", fields: [user_id], references: [id])
  friend    User    @relation(name: "friend_users", fields: [friend_id], references: [id])

  @@unique([user_id, friend_id])
}

model FriendRequest {
  id        String      @id @default(cuid())
  user_id   String
  friend_id String
  user      User    @relation(name: "user_requests", fields: [user_id], references: [id])
  friend    User    @relation(name: "friend_user_requests", fields: [friend_id], references: [id])
  status FriendRequestStatus
  @@unique([user_id, friend_id])
}

enum FriendRequestStatus {
  PENDING
  CONFIRMED
  REJECTED
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
