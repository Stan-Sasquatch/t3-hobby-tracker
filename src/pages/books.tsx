import { InferGetStaticPropsType, type NextPage } from "next";
import Head from "next/head";
import type { ChangeEvent } from "react";
import React from "react";
import { authorSearchGoogleVolumes } from "../books/queries";
import type {
  GoogleVolume,
  GoogleVolumesResponse,
} from "../server/books/models";

export async function getStaticProps() {
  return { props: { googleKey: process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY } };
}

const Books: NextPage<InferGetStaticPropsType<typeof getStaticProps>> = (
  props
) => {
  const [authorSearchText, setAuthorSearchText] = React.useState<string>("");
  const [volumeSearchText, setVolumeSearchText] = React.useState<string>("");
  const [resultsData, setResultsData] = React.useState<GoogleVolumesResponse>({
    items: [],
  });
  const [selectedVolume, setSelectedBookVolume] =
    React.useState<GoogleVolume | null>(null);
  const [rating, setRating] = React.useState<number | null>(null);
  const [loading, setLoading] = React.useState<boolean>(false);
  const [submitResponse, setSubmitResponse] = React.useState<string | null>(
    null
  );

  async function handleSubmit() {
    if (!props.googleKey) {
      return;
    }
    setLoading(true);
    const data = await authorSearchGoogleVolumes(
      props.googleKey,
      volumeSearchText,
      authorSearchText
    );
    setLoading(false);

    if (data?.items) {
      setResultsData(data);
      console.log(data);
    } else {
      setResultsData({ items: [] });
    }
  }

  const onSelectedBookChange = (event: ChangeEvent<HTMLSelectElement>) => {
    const item = resultsData.items?.find((x) => x.id === event.target.value);
    if (item) {
      setSelectedBookVolume(item);
    }
  };
  return (
    <>
      <Head>
        <title>Books</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-3xl font-medium tracking-tight text-white sm:text-[3rem]">
            Search for a book
          </h1>
          <form>
            <div className="flex-col">
              <div className="flex-row py-2">
                <label htmlFor="volume" className="p-1 text-white">
                  Volume:
                </label>
                <input
                  className="rounded-sm border-black p-1"
                  type="text"
                  id="volume"
                  name="volume"
                  value={volumeSearchText}
                  onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
                    setVolumeSearchText(event.target.value)
                  }
                />
                <label htmlFor="author" className="p-1 text-white">
                  Author:
                </label>
                <input
                  className="rounded-sm border-black p-1"
                  type="text"
                  id="author"
                  name="author"
                  value={authorSearchText}
                  onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
                    setAuthorSearchText(event.target.value)
                  }
                />
                <button
                  type="button"
                  onClick={handleSubmit}
                  className="rounded bg-blue-500 py-2 px-4 font-bold text-white hover:bg-blue-700"
                >
                  Search
                </button>
              </div>
              {resultsData.items && resultsData.items.length > 0 && (
                <>
                  <label className="p-1 text-white" htmlFor="select-books">
                    Books:
                  </label>
                  <select
                    id="select-books"
                    value={selectedVolume?.id}
                    onChange={onSelectedBookChange}
                  >
                    {resultsData.items.map((item) => (
                      <option key={item.id} value={item.id}>
                        {`${item.volumeInfo?.title} ${item.volumeInfo?.authors?.[0]}`}
                      </option>
                    ))}
                  </select>
                </>
              )}
            </div>
          </form>
        </div>
      </main>
    </>
  );
};

export default Books;
